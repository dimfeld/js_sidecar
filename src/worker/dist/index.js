import a from"node:cluster";import k from"node:os";import g from"node:fs";import{parseArgs as y}from"node:util";import R from"node:net";import{EventEmitter as $}from"node:events";import*as d from"vm";var h=(e=>(e[e.RunScript=0]="RunScript",e[e.Ping=1]="Ping",e))(h||{}),p=(e=>(e[e.RunResponse=4096]="RunResponse",e[e.Log=4097]="Log",e[e.Error=4098]="Error",e[e.Pong=4099]="Pong",e))(p||{});const v=!!process.env.DEBUG_JS_SIDECAR_WORKER;function c(...e){v&&console.log(...e)}const w=12,x=0,b=4,E=8;class I extends ${socket;buffer;expectedLength;id;cache=new Map;constructor(r){super(),this.socket=r,this.buffer=Buffer.alloc(0),this.expectedLength=null,this.id=0,this.socket.on("data",t=>this.handleData(t))}handleData(r){for(this.buffer=Buffer.concat([this.buffer,r]);this.buffer.length>0;){if(this.expectedLength===null){if(this.buffer.length<4)return;this.expectedLength=this.buffer.readUInt32LE(0),this.buffer=this.buffer.subarray(4)}if(this.buffer.length<this.expectedLength)return;const t=this.buffer.readUInt32LE(x),n=this.buffer.readUInt32LE(b),i=this.buffer.readUInt32LE(E),o=this.buffer.subarray(12,this.expectedLength);this.buffer=this.buffer.subarray(this.expectedLength),this.expectedLength=null;const f={id:n,reqId:t,type:i,data:o};this.emit("message",f)}}sendMessage(r,t,n){c("Sending message",r,t,n),n instanceof Buffer||(n=Buffer.from(n));let i=this.id++;const o=Buffer.allocUnsafe(w+4);return o.writeUInt32LE(n.length+w),o.writeUInt32LE(r,x+4),o.writeUInt32LE(i,b+4),o.writeUInt32LE(t,E+4),this.socket.write(Buffer.concat([o,n])),i}log(r,t,n){let i=JSON.stringify({level:t,message:n});this.sendMessage(r,p.Log,i)}respond(r,t){this.sendMessage(r,p.RunResponse,JSON.stringify(t))}error(r,t){let n={message:t.message,stack:t.stack},i=JSON.stringify(n);this.sendMessage(r,p.Error,i)}}const S=Symbol("runCtx");function _(e,r){let t=r.recreateContext?void 0:e.protocol.cache.get(S);if(t){if(r.globals)for(const[n,i]of Object.entries(r.globals))t.context[n]=i}else{const n={log:(...o)=>e.log(o,"info"),info:(...o)=>e.log(o,"info"),warn:(...o)=>e.log(o,"warn"),error:(...o)=>e.log(o,"error")},i=d.createContext({...r.globals,console:n});t={modules:{},context:i},e.protocol.cache.set(S,t)}for(const n of r.functions??[])t.context[n.name]=d.compileFunction(n.code,n.params,{parsingContext:t.context});for(const n of r.modules??[])t.modules[n.name]=new d.SourceTextModule(n.code,{identifier:n.name,context:t.context});return t}async function O(e,r){let t=_(r,e),n;if(!e.code)return{};if(e.expr)n=d.runInContext(e.code,t.context,{filename:e.name,timeout:e.timeoutMs??void 0}),typeof n?.then=="function"&&(n=await n);else{async function o(s,u){const l=t.modules[s];if(l)return l;throw new Error(`Module not found: ${s}, referenced from ${u.identifier}`)}let f=new d.SourceTextModule(e.code,{identifier:e.name,context:t.context});await f.link(o),await f.evaluate()}return{globals:e.returnKeys?Object.fromEntries(e.returnKeys.map(o=>[o,t.context[o]])):t.context,returnValue:n}}function C(e){c(`Worker ${process.pid} started`);const r=R.createServer(),t=()=>{c(`Worker ${process.pid} is shutting down`),r.close(()=>process.exit(0))};process.on("message",i=>{c(`Worker ${process.pid} received message: ${i}`),i=="shutdown"&&(c(`Worker ${process.pid} received shutdown message`),t())}),a.worker?.send("ready"),process.on("SIGTERM",t),process.on("SIGINT",t);function n(i){let o=new I(i);o.on("message",f=>G(o,f))}r.on("error",i=>{console.error(i),process.exit(1)}),r.listen(e,()=>{c(`Worker ${process.pid} is listening on ${e}`),r.on("connection",n)})}function G(e,{id:r,reqId:t,type:n,data:i}){if(n===h.Ping){e.sendMessage(t,p.Pong,Buffer.alloc(0));return}let o=!1;const f={protocol:e,reqId:t,id:r,log(s,u="info"){c(`${t}[${u}]:`,s),e.log(t,u,s)},respond(s){o=!0,e.respond(t,s)},error(s){c(`${t}: `,s.message),e.error(t,s)}};P(f,n,i).then(s=>{(s!=null||!o)&&f.respond(s??null)}).catch(s=>{c("Failed to handle request:"),f.error(s)})}async function P(e,r,t){switch(r){case h.RunScript:return O(JSON.parse(t.toString()),e)}}if(a.isPrimary){let e=function(){if(o)return;let s=a.fork({SOCKET_PATH:i});s.on("message",u=>{u==="ready"&&o&&s.send("shutdown")})};const r=process.argv[1],{values:t}=y({options:{workers:{type:"string",default:k.cpus().length.toString()},socket:{type:"string"}}}),n=parseInt(t.workers??"1",10),i=t.socket;let o=!1;if(!i)throw new Error("No socket path provided");process.on("exit",()=>{try{g.unlinkSync(i)}catch{}});const f=()=>{c("shutting down"),o&&process.exit(1),o=!0;for(let s of Object.values(a.workers??{}))s?.send("shutdown",()=>{})};process.on("SIGTERM",f),process.on("SIGINT",f),a.on("online",s=>{c("online",s.process.pid,o),o&&s.kill("SIGKILL")}),a.on("exit",(s,u,l)=>{if(c("exit",s.process.pid,u,l,o,i),!o&&!g.existsSync(r)&&(c(`${i} script is gone, shutting down`),f()),o){const m=Object.values(a.workers??{}).map(L=>L?.process.pid);c(i,"remaining workers:",m),m.length==0&&process.exit(0);return}c(l?`Worker ${s.process.pid} died with signal ${l}. Restarting...`:`Worker ${s.process.pid} died with code ${u}. Restarting...`),e()}),c(`Primary ${process.pid} is running, starting ${n} workers and connecting to ${i}`);for(let s=0;s<n;s++)e()}else C(process.env.SOCKET_PATH);
//# sourceMappingURL=index.js.map
